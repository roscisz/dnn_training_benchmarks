diff --git a/dcgan/main.py b/dcgan/main.py
index 9d5369c..4353858 100644
--- a/dcgan/main.py
+++ b/dcgan/main.py
@@ -3,7 +3,6 @@ import argparse
 import os
 import random
 import torch
-import torch.nn as nn
 import torch.nn.parallel
 import torch.backends.cudnn as cudnn
 import torch.optim as optim
@@ -11,11 +10,21 @@ import torch.utils.data
 import torchvision.datasets as dset
 import torchvision.transforms as transforms
 import torchvision.utils as vutils
+from torch import distributed, nn
 
 
 parser = argparse.ArgumentParser()
+parser.add_argument('--backend', type=str, default='gloo', help='Name of the backend to use.')
+parser.add_argument(
+    '-i',
+    '--init-method',
+    type=str,
+    default='tcp://127.0.0.1:23456',
+    help='URL specifying how to initialize the package.')
+parser.add_argument('-s', '--world-size', type=int, default=1, help='Number of processes participating in the job.')
+parser.add_argument('-r', '--rank', type=int, default=0, help='Rank of the current process.')
 parser.add_argument('--dataset', required=True, help='cifar10 | lsun | mnist |imagenet | folder | lfw | fake')
-parser.add_argument('--dataroot', required=True, help='path to dataset')
+parser.add_argument('--dataroot', required=False, help='path to dataset')
 parser.add_argument('--workers', type=int, help='number of data loading workers', default=2)
 parser.add_argument('--batchSize', type=int, default=64, help='input batch size')
 parser.add_argument('--imageSize', type=int, default=64, help='the height / width of the input image to network')
@@ -36,6 +45,14 @@ parser.add_argument('--classes', default='bedroom', help='comma separated list o
 opt = parser.parse_args()
 print(opt)
 
+if opt.world_size > 1:
+        distributed.init_process_group(
+            backend=opt.backend,
+            init_method=opt.init_method,
+            world_size=opt.world_size,
+            rank=opt.rank,
+        )
+
 try:
     os.makedirs(opt.outf)
 except OSError:
@@ -155,6 +172,7 @@ netG = Generator(ngpu).to(device)
 netG.apply(weights_init)
 if opt.netG != '':
     netG.load_state_dict(torch.load(opt.netG))
+netG = nn.parallel.DistributedDataParallel(netG)
 print(netG)
 
 
@@ -196,6 +214,7 @@ netD = Discriminator(ngpu).to(device)
 netD.apply(weights_init)
 if opt.netD != '':
     netD.load_state_dict(torch.load(opt.netD))
+netD = nn.parallel.DistributedDataParallel(netD)
 print(netD)
 
 criterion = nn.BCELoss()
